@misc{db_rating,
	title="DB-Engines Ranking [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://db-engines.com/en/ranking} (Дата обращения: 10.11.2022)"
}

@misc{mongo,
	title="MongoDB Database [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://www.mongodb.com/atlas/database} (Дата обращения: 16.11.2022)"
}

@misc{posgtgres,
	title="PostgreSQL Documentation [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://www.postgresql.org/docs/} (Дата обращения: 12.11.2022)"
}

@misc{hibernateogm,
	title="Hibernate OGM [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://hibernate.org/ogm/} (Дата обращения: 16.11.2022)"
}

@misc{mongosyphon,
	title="MongoSyphon [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://github.com/johnlpage/MongoSyphon} (Дата обращения: 26.11.2022)"
}

@article{Codd_Relational,
  author = {Codd, E. F.},
  title = {A Relational Model of Data for Large Shared Data Banks},
  year = {1970},
  issue_date = {June 1970},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {13},
  number = {6},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/362384.362685},
  doi = {10.1145/362384.362685},
  abstract = {Future users of large data banks must be protected from having to know how the data is organized in the machine (the internal representation). A prompting service which supplies such information is not a satisfactory solution. Activities of users at terminals and most application programs should remain unaffected when the internal representation of data is changed and even when some aspects of the external representation are changed. Changes in data representation will often be needed as a result of changes in query, update, and report traffic and natural growth in the types of stored information.Existing noninferential, formatted data systems provide users with tree-structured files or slightly more general network models of the data. In Section 1, inadequacies of these models are discussed. A model based on n-ary relations, a normal form for data base relations, and the concept of a universal data sublanguage are introduced. In Section 2, certain operations on relations (other than logical inference) are discussed and applied to the problems of redundancy and consistency in the user's model.},
  journal = {Commun. ACM},
  month = {1},
  pages = {377–387},
  numpages = {11},
  keywords = {relations, data bank, predicate calculus, composition, retrieval language, hierarchies of data, data organization, join, redundancy, data structure, data base, derivability, networks of data, consistency, security, data integrity}
}

@article{Chen,
  author = {Chen and Peter and Pin-Shan},
  title = {The Entity-Relationship Model—toward a Unified View of Data},
  year = {1976},
  issue_date = {March 1976},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {1},
  number = {1},
  issn = {0362-5915},
  url = {https://doi.org/10.1145/320434.320440},
  doi = {10.1145/320434.320440},
  abstract = {A data model, called the entity-relationship model, is proposed. This model incorporates some of the important semantic information about the real world. A special diagrammatic technique is introduced as a tool for database design. An example of database design and description using the model and the diagrammatic technique is given. Some implications for data integrity, information retrieval, and data manipulation are discussed.The entity-relationship model can be used as a basis for unification of different views of data: the network model, the relational model, and the entity set model. Semantic ambiguities in these models are analyzed. Possible ways to derive their views of data from the entity-relationship model are presented.},
  journal = {ACM Trans. Database Syst.},
  month = {3},
  pages = {9–36},
  numpages = {28},
  keywords = {network model, relational model, data models, entity set model, semantics of data, database design, Data Base Task Group, data definition and manipulation, entity-relationship model, logigcal view of data, data integrity and consistency}
}

@article{Codd_NF,
  author = {Codd, E. F.},
  title = {Extending the Database Relational Model to Capture More Meaning},
  year = {1979},
  issue_date = {Dec. 1979},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {4},
  number = {4},
  issn = {0362-5915},
  url = {https://doi.org/10.1145/320107.320109},
  doi = {10.1145/320107.320109},
  abstract = {During the last three or four years several investigators have been exploring “semantic models” for formatted databases. The intent is to capture (in a more or less formal way) more of the meaning of the data so that database design can become more systematic and the database system itself can behave more intelligently. Two major thrusts are clear.In this paper we propose extensions to the relational model to support certain atomic and molecular semantics. These extensions represent a synthesis of many ideas from the published work in semantic modeling plus the introduction of new rules for insertion, update, and deletion, as well as new algebraic operators.},
  journal = {ACM Trans. Database Syst.},
  month = {dec},
  pages = {397–434},
  numpages = {38},
  keywords = {knowledge representation, entity model, relatinal database, relation, relational schema, database, knowledge base, conceptual model, semantic model, data model, database schema, relational model, data semantics, conceptual schema}
}

@inproceedings{SQL,
  author = {Chamberlin, Donald D. and Boyce, Raymond F.},
  title = {SEQUEL: A Structured English Query Language},
  year = {1974},
  isbn = {9781450374156},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/800296.811515},
  doi = {10.1145/800296.811515},
  abstract = {In this paper we present the data manipulation facility for a structured English query language (SEQUEL) which can be used for accessing data in an integrated relational data base. Without resorting to the concepts of bound variables and quantifiers SEQUEL identifies a set of simple operations on tabular structures, which can be shown to be of equivalent power to the first order predicate calculus. A SEQUEL user is presented with a consistent set of keyword English templates which reflect how people use tables to obtain information. Moreover, the SEQUEL user is able to compose these basic templates in a structured manner in order to form more complex queries. SEQUEL is intended as a data base sublanguage for both the professional programmer and the more infrequent data base user.},
  booktitle = {Proceedings of the 1974 ACM SIGFIDET (Now SIGMOD) Workshop on Data Description, Access and Control},
  pages = {249–264},
  numpages = {16},
  keywords = {Information Retrieval, Query Languages, Data Manipulation Languages, Data Base Management Systems},
  location = {Ann Arbor, Michigan},
  series = {SIGFIDET '74}
}

@book{Date,
  title={An Introduction to Database Systems},
  author={Date, C.J.},
  isbn={9780201543292},
  lccn={94003187},
  series={Addison-Wesley systems programming series},
  year={1995},
  publisher={Addison-Wesley Publishing Company}
}
  % url={https://books.google.ru/books?id=2xBRAAAAMAAJ},

@article{nosqlusage,
  title={SQL and NoSQL Databases Software architectures performance analysis and assessments--A Systematic Literature review},
  author={Khan, Wisal and Kumar, Teerath and Cheng, Zhang},
  year={2022}
}

@inbook{nosql,
  author = {Sadalage, Pramod J. and Fowler, Martin},
  title = {NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence},
  year = {2012},
  isbn = {0321826620},
  publisher = {Addison-Wesley Professional},
  edition = {1st},
  abstract = {The need to handle increasingly larger data volumes is one factor driving the adoption of a new class of nonrelational NoSQL databases. Advocates of NoSQL databases claim they can be used to build systems that are more performant, scale better, and are easier to program. NoSQL Distilled is a concise but thorough introduction to this rapidly emerging technology. Pramod J. Sadalage and Martin Fowler explain how NoSQL databases work and the ways that they may be a superior alternative to a traditional RDBMS. The authors provide a fast-paced guide to the concepts you need to know in order to evaluate whether NoSQL databases are right for your needs and, if so, which technologies you should explore further. The first part of the book concentrates on core concepts, including schemaless data models, aggregates, new distribution models, the CAP theorem, and map-reduce. In the second part, the authors explore architectural and design issues associated with implementing NoSQL. They also present realistic use cases that demonstrate NoSQL databases at work and feature representative examples using Riak, MongoDB, Cassandra, and Neo4j. In addition, by drawing on Pramod Sadalages pioneering work, NoSQL Distilled shows how to implement evolutionary design with schema migration: an essential technique for applying NoSQL databases. The book concludes by describing how NoSQL is ushering in a new age of Polyglot Persistence, where multiple data-storage worlds coexist, and architects can choose the technology best optimized for each type of data access.}
}

@article{mapreduce_new,
  title = {Google’s MapReduce programming model — Revisited},
  journal = {Science of Computer Programming},
  volume = {70},
  number = {1},
  pages = {1-30},
  year = {2008},
  issn = {0167-6423},
  doi = {https://doi.org/10.1016/j.scico.2007.07.001},
  url = {https://www.sciencedirect.com/science/article/pii/S0167642307001281},
  author = {Ralf Lämmel},
  keywords = {Data processing, Parallel programming, Distributed programming, Software design, Executable specification, Typed functional programming, MapReduce, Sawzall, Map, Reduce, List homomorphism, Haskell},
  abstract = {Google’s MapReduce programming model serves for processing large data sets in a massively parallel manner. We deliver the first rigorous description of the model including its advancement as Google’s domain-specific language Sawzall. To this end, we reverse-engineer the seminal papers on MapReduce and Sawzall, and we capture our findings as an executable specification. We also identify and resolve some obscurities in the informal presentation given in the seminal papers. We use typed functional programming (specifically Haskell) as a tool for design recovery and executable specification. Our development comprises three components: (i) the basic program skeleton that underlies MapReduce computations; (ii) the opportunities for parallelism in executing MapReduce computations; (iii) the fundamental characteristics of Sawzall’s aggregators as an advancement of the MapReduce approach. Our development does not formalize the more implementational aspects of an actual, distributed execution of MapReduce computations.}
}

@article{mapreduce,
  author = {Dean, Jeffrey and Ghemawat, Sanjay},
  title = {MapReduce: Simplified Data Processing on Large Clusters},
  year = {2008},
  issue_date = {January 2008},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {51},
  number = {1},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/1327452.1327492},
  doi = {10.1145/1327452.1327492},
  abstract = {MapReduce is a programming model and an associated implementation for processing and generating large datasets that is amenable to a broad variety of real-world tasks. Users specify the computation in terms of a map and a reduce function, and the underlying runtime system automatically parallelizes the computation across large-scale clusters of machines, handles machine failures, and schedules inter-machine communication to make efficient use of the network and disks. Programmers find the system easy to use: more than ten thousand distinct MapReduce programs have been implemented internally at Google over the past four years, and an average of one hundred thousand MapReduce jobs are executed on Google's clusters every day, processing a total of more than twenty petabytes of data per day.},
  journal = {Commun. ACM},
  month = {jan},
  pages = {107–113},
  numpages = {7}
}

@inproceedings{cap,
  author = {Brewer, Eric A.},
  title = {Towards Robust Distributed Systems (Abstract)},
  year = {2000},
  isbn = {1581131836},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/343477.343502},
  doi = {10.1145/343477.343502},
  abstract = {Current distributed systems, even the ones that work, tend to be very fragile: they are hard to keep up, hard to manage, hard to grow, hard to evolve, and hard to program. In this talk, I look at several issues in an attempt to clean up the way we think about these systems. These issues include the fault model, high availability, graceful degradation, data consistency, evolution, composition, and autonomy.These are not (yet) provable principles, but merely ways to think about the issues that simplify design in practice. They draw on experience at Berkeley and with giant-scale systems built at Inktomi, including the system that handles 50 percent of all web searches.},
  booktitle = {Proceedings of the Nineteenth Annual ACM Symposium on Principles of Distributed Computing},
  pages = {7},
  location = {Portland, Oregon, USA},
  series = {PODC '00}
}

@inproceedings{cap_new,
  author = {Brewer, Eric A.},
  title = {A Certain Freedom: Thoughts on the CAP Theorem},
  year = {2010},
  isbn = {9781605588889},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/1835698.1835701},
  doi = {10.1145/1835698.1835701},
  abstract = {At PODC 2000, the CAP theorem received its first broad audience. Surprisingly for an impossibility result, one important effect has been to free designers to explore a wider range of distributed systems. Designers of wide-area systems, in which network partitions are considered inevitable, know they cannot have both availability and consistency, and thus can now justify weaker consistency. The rise of the "NoSQL" movement ("Not Only SQL") is an expression of this freedom.The choices of how and when to weaken consistency are often the defining characteristics of these systems, with new variations appearing every year. We review a variety of interesting places in the "CAP Space" as a way to illuminate these issues and their consequences. For example, automatic teller machines (ATMs), which predate the CAP theorem, surprisingly choose availability with weak consistency but with bounded risk.Finally, I explore a few of the options to try to "work around" the impossible. The most basic is the use of commutative operations, which make it easy to restore consistency after a partition heals. However, even many commutative operations have non-commutative exceptions in practice, which means that the exceptions may be incorrect or late. Adding the concept of "delayed exceptions" allows more operations to be considered commutative and simplifies eventual consistency during a partition. Furthermore, we can think of delayed exception handling as "compensation" - we execute a compensating transaction that restores consistency.Delayed exception handling with compensation appears to be what most real wide-area systems do - inconsistency due to limited communication is treated as an exception and some exceptional action, such as monetary compensation or even legal action, is used to fix it. This approach to wide-area systems puts the emphasis on audit trails and recovery rather than prevention, and implies that we should expand and formalize the role of compensation in the design of complex systems},
  booktitle = {Proceedings of the 29th ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing},
  pages = {335},
  numpages = {1},
  keywords = {cap theorem},
  location = {Zurich, Switzerland},
  series = {PODC '10}
}

@article{morecap,
  author    = {Edward A. Lee and
               Soroush Bateni and
               Shaokai Lin},
  title     = {Quantifying and Generalizing the {CAP} Theorem},
  year      = {2021},
  url       = {https://arxiv.org/abs/2109.07771},
  eprinttype = {arXiv},
  eprint    = {2109.07771},
  timestamp = {Wed, 22 Sep 2021 14:16:57 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2109-07771.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{migration,
  author="Bansal, Neha
  and Soni, Kanika
  and Sachdeva, Shelly",
  editor="Sachdeva, Shelly
  and Watanobe, Yutaka
  and Bhalla, Subhash",
  title="Journey of Database Migration from RDBMS to NoSQL Data Stores",
  booktitle="Big-Data-Analytics in Astronomy, Science, and Engineering",
  year="2022",
  publisher="Springer International Publishing",
  address="Cham",
  pages="159--177",
  abstract="Migration is a complex process involving many challenges while migrating from an existing system to a new one. Database migration involves schema transformation, migration of data, complex query support, and indexing. This paper presents a) Journey on existing migration techniques from RDBMS (SQL) to NoSQL databases. Schema migration and Data migration are two main aspects while migrating from relational to NoSQL database. b) The various existing techniques related to schema migration and data migration. The techniques presented for schema migration include graph-based algorithms, denormalization techniques such as column level denormalization and table level denormalization, link list-based, and ETL tools. The paper also addresses different business methods for data migration, commonly known as basic tools and ETL tools. c) The authors highlight some open challenges like need and cost of denormalization and selection of columns for denormalization. The assessment of various techniques (based on space or time costs) is presented. The key challenge is to pick a particular datastore on which to apply a specific technique. d) The paper also describes current market-driven migration tools based on each particular data store. e) It also throws light on different organizations that successfully migrated to a particular NoSQL data store. Thus, the purpose of this study is to contribute to the state-of-the-art in the field of database migration and to serve as a foundation for selecting and developing RDBMS-to-NoSQL data migration techniques or tools.",
  isbn="978-3-030-96600-3"
}

@INPROCEEDINGS{graphmethod,
  author={Zhao, Gansen and Lin, Qiaoying and Li, Libo},
  booktitle={2014 Ninth International Conference on P2P, Parallel, Grid, Cloud and Internet Computing}, 
  title={Schema Conversion Model of SQL Database to NoSQL}, 
  year={2014},
  volume={},
  number={},
  pages={355-362},
  doi={10.1109/3PGCIC.2014.137}
}


@inproceedings{graphmethod1,
  author = {Sun, Wen and Fokoue, Achille and Srinivas, Kavitha},
  title = {SQLGraph: An Efficient Relational-Based Property Graph Store},
  year = {2015},
  isbn = {9781450327589},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2723372.2723732},
  doi = {10.1145/2723372.2723732},
  abstract = {We show that existing mature, relational optimizers can be exploited with a novel schema to give better performance for property graph storage and retrieval than popular noSQL graph stores. The schema combines relational storage for adjacency information with JSON storage for vertex and edge attributes. We demonstrate that this particular schema design has benefits compared to a purely relational or purely JSON solution. The query translation mechanism translates Gremlin queries with no side effects into SQL queries so that one can leverage relational query optimizers. We also conduct an empirical evaluation of our schema design and query translation mechanism with two existing popular property graph stores. We show that our system is 2-8 times better on query performance, and 10-30 times better in throughput on 4.3 billion edge graphs compared to existing stores.},
  booktitle = {Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data},
  pages = {1887–1901},
  numpages = {15},
  keywords = {gremlin, relational storage, property graphs},
  location = {Melbourne, Victoria, Australia},
  series = {SIGMOD '15}
}

@INPROCEEDINGS{DODS,
  author={Hamouda, Shady and Zainol, Zurinahni},
  booktitle={2017 International Conference on Big Data Innovations and Applications (Innovate-Data)}, 
  title={Document-Oriented Data Schema for Relational Database Migration to NoSQL}, 
  year={2017},
  volume={},
  number={},
  pages={43-50},
  doi={10.1109/Innovate-Data.2017.13}}

  
@article{etl,
  title={Data migration methodology from relational to NoSQL databases},
  author={Hanine, Mohamed and Bendarag, Abdesadik and Boutkhoum, Omar},
  journal={International Journal of Computer, Electrical, Automation, Control and Information Engineering},
  volume={9},
  number={12},
  pages={2566--2570},
  year={2015}
}

@article{ONM,
  title={Schemaless NoSQL data stores-Object-NoSQL Mappers to the rescue?},
  author={St{\"o}rl, Uta and Hauf, Thomas and Klettke, Meike},
  journal={Datenbanksysteme f{\"u}r Business, Technologie und Web (BTW 2015)},
  year={2015},
  publisher={Gesellschaft f{\"u}r Informatik eV}
}

@article{embedding,
  title={An algorithm for transformation of data from MySQL to NoSQL (MongoDB)},
  author={Arora, Rupali and Aggarwal, Rinkle Rani},
  journal={International Journal of Advanced Studies in Computer Science and Engineering},
  volume={2},
  number={1},
  pages={6--12},
  year={2013}
}

@inproceedings{graphtags,
  title={Model transformation and data migration from relational database to MongoDB},
  author={Jia, Tianyu and Zhao, Xiaomeng and Wang, Zheng and Gong, Dahan and Ding, Guiguang},
  booktitle={2016 IEEE International Congress on Big Data (BigData Congress)},
  pages={60--67},
  year={2016},
  organization={IEEE}
}


@inproceedings{csv,
  title={Comparison of relational database with document-oriented database (mongodb) for big data applications},
  author={Chickerur, Satyadhyan and Goudar, Anoop and Kinnerkar, Ankita},
  booktitle={2015 8th International Conference on Advanced Software Engineering \& Its Applications (ASEA)},
  pages={41--47},
  year={2015},
  organization={IEEE}
}

@inproceedings{reference,
  title={Application of nosql database mongodb},
  author={Gu, Yunhua and Shen, Shu and Wang, Jin},
  booktitle={2015 IEEE International Conference on Consumer Electronics-Taiwan},
  pages={158--159},
  year={2015},
  organization={IEEE}
}


@article{linq,
  title={Migration of a web service back-end from a relational to a document-oriented database},
  author={Drenckberg, Sebastian Georg and Politze, Marius and Center, IT},
  year={2018},
  publisher={Universit{\"a}tsbibliothek der RWTH Aachen}
}

@article{mappers,
  title={When relational-based applications go to NoSQL databases: A survey},
  author={Schreiner, Geomar A and Duarte, Denio and Mello, Ronaldo dos Santos},
  journal={Information},
  volume={10},
  number={7},
  pages={241},
  year={2019},
  publisher={MDPI}
}

@reference{gost,
  heading = {ГОСТ 33707-2016},
  title = {Информационные технологии. Словарь},
  media = {text},
  _stdintroduced ={2017-09-01},
  year ={2017},
  publisher = {Росстандарт},
  series = {Межгосударственный стандарт},
  langid = {russian}
}




@misc{jdbc-api,
	title="JDBC API Specification [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/} (Дата обращения: 20.05.2023)"
}

@misc{openjdk-17,
	title="OpenJDK 17 [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://openjdk.org/projects/jdk/17/} (Дата обращения: 20.05.2023)"
}

@misc{spring-boot,
	title="Spring Boot [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://spring.io/projects/spring-boot} (Дата обращения: 20.05.2023)"
}

@misc{spring-data-jdbc,
	title="Spring Data JDBC Reference Documentation [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://docs.spring.io/spring-data/jdbc/docs/current/reference/html/} (Дата обращения: 20.05.2023)"
}

@misc{spring-data-mongodb,
	title="Spring Data MongoDB Reference Documentation [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/} (Дата обращения: 20.05.2023)"
}


@misc{spring-shell,
	title="Spring Data MongoDB Reference Documentation [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://docs.spring.io/spring-shell/docs/2.1.2/site/reference/htmlsingle/} (Дата обращения: 20.05.2023)"
}


@misc{jackson-databind,
	title="Jackson-Databind Documentation [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://github.com/FasterXML/jackson-databind/wiki} (Дата обращения: 20.05.2023)"
}

@misc{pg-stat-statements,
	title="PostgreSQL pg\_stat\_statements Documentation [Электронный ресурс]",
	howpublished="Режим доступа URL: \url{https://www.postgresql.org/docs/current/pgstatstatements.html} (Дата обращения: 20.05.2023)"
}

https://www.postgresql.org/docs/current/pgstatstatements.html
